<%= form_for(@investment, url: form_url, method: :put, html: { multipart: true }) do |f| %>
  <%= render 'shared/errors', resource: @investment %>

  <div class="row">

    <div class="small-12 column">
      <%= f.text_field :title, maxlength: Budget::Investment.title_max_length %>
    </div>
    <div id="js-suggest"></div>

    <%= f.invisible_captcha :subtitle %>

    <!-- 
    <div class="ckeditor small-12 column">
      <%= f.cktext_area :description, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale }, value: t("custom.meta.guiding_questions").html_safe %>
    </div>
    -->

    <div class="ckeditor small-12 column">
      <%= f.cktext_area :q1, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale } %>
    </div>

    <div class="ckeditor small-12 column">
      <%= f.cktext_area :q2, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale } %>
    </div>

    <div class="ckeditor small-12 column">
      <%= f.cktext_area :q3, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale } %>
    </div>

    <div class="ckeditor small-12 column">
      <%= f.cktext_area :q4, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale } %>
    </div>

    <%

    # <div class="ckeditor small-12 column">
    #   <%= f.cktext_area :q5, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale } %>
    # </div>

    # <div class="ckeditor small-12 column">
    #   <%= f.cktext_area :q6, maxlength: Budget::Investment.description_max_length, ckeditor: { language: I18n.locale } %>
    # </div>

    %>

    <div class="small-12 column">
      <%= f.label :price, t("budgets.investments.show.price") %>
      <%= f.number_field :price, label: '&nbsp;(â‚¬)' %>
    </div>

    <div class="small-12 column">
      <%= f.label :q7 %>
      <%= f.hidden_field :q7 %>
      <%= @investment[:q7].html_safe %>
      <a href="#" class="action-button small" id="add-table-row">Dodaj postavko</a>
    </div>

    <% if feature?(:allow_images) %>
      <div class="images small-12 column">
        <%= render 'images/nested_image', imageable: @investment, f: f %>
      </div>
    <% end %>

    <% if feature?(:allow_attached_documents) %>
      <div class="documents small-12 column">
        <%= render 'documents/nested_documents', documentable: @investment, f: f %>
      </div>
    <% end %>

    <% if feature?(:map) %>
      <div class="small-12 column">
        <%= render 'map_locations/form_fields',
                   form: f,
                   map_location: @investment.map_location || MapLocation.new,
                   label: t("budgets.investments.form.map_location"),
                   help: t("budgets.investments.form.map_location_instructions"),
                   remove_marker_label: t("budgets.investments.form.map_remove_marker"),
                   parent_class: "budget_investment",
                   i18n_namespace: "budgets.investments" %>
      </div>
    <% end %>

    <div class="small-12 column hide">
      <%= f.label :location, t("budgets.investments.form.location") %>
      <%= f.text_field :location, label: false %>
    </div>

    <div class="small-12 column hide">
      <%= f.text_field :organization_name %>
    </div>

    <% if @budget.headings.count > 1 %>
      <div class="small-12 medium-8 column">
        <%= f.select :heading_id, budget_heading_select_options(@budget), { include_blank: true, }, class: 'on-form' %>
      </div>
    <% elsif @budget.headings.count == 1 %>
      <div class="small-12 medium-8 column hide">
        <%= f.text_field :heading_id, value: @budget.headings.first.id %>
      </div>
    <% end %>

    <!-- REMOVE TAGS
    <div class="small-12 column">
      <%= f.label :tag_list, t("budgets.investments.form.tags_label") %>
      <p class="help-text hide" id="tag-list-help-text">(<%= t("budgets.investments.form.tags_instructions") %>)</p>
      <div id="category_tags" class="tags">
        <% @categories.each do |tag| %>
          <a class="js-add-tag-link"><%= tag.name %></a>
        <% end %>
      </div>

      <%= f.text_field :tag_list, value: @investment.tag_list.to_s,
                       label: false,
                       placeholder: t("budgets.investments.form.tags_placeholder"),
                       aria: { describedby: "tags-list-help-text" },
                       class: 'js-tag-list tag-autocomplete',
                       data: { js_url: suggest_tags_path } %>
    </div>
    END REMOVE TAGS -->

    <% unless current_user.manager? %>

      <div class="small-12 column hide">
        <%= f.label :terms_of_service do %>
          <%= f.check_box :terms_of_service, title: t('custom.form.accept_terms_title'), label: false, checked: true %>
          <span class="checkbox">
            <%= t("custom.form.accept_terms",
                  conditions: link_to(t("form.conditions"), "/conditions", target: "blank")).html_safe %>
          </span>
        <% end %>
      </div>

    <% end %>

    <div class="actions small-12 end column">
      <%= button_tag(type: 'submit', class: "action-button large w485") do %>
        <%= t("management.budgets.create_new_investment") %>&nbsp;<i class="custom-icon arrow-small-right"></i>
      <% end %>
    </div>
  </div>
  <script>
  /*global $, window*/
  $.fn.editableTableWidget = function (options) {
    'use strict';
    return $(this).each(function () {
      var buildDefaultOptions = function () {
          var opts = $.extend({}, $.fn.editableTableWidget.defaultOptions);
          opts.editor = opts.editor.clone();
          return opts;
        },
        activeOptions = $.extend(buildDefaultOptions(), options),
        ARROW_LEFT = 37, ARROW_UP = 38, ARROW_RIGHT = 39, ARROW_DOWN = 40, ENTER = 13, ESC = 27, TAB = 9,
        element = $(this),
        editor = activeOptions.editor.css('position', 'absolute').hide().appendTo(element.parent()),
        active,
        showEditor = function (select) {
          active = element.find('td:focus');
          if (active.length) {
            editor.val(active.text())
              .removeClass('error')
              .show()
              .offset(active.offset())
              .css(active.css(activeOptions.cloneProperties))
              .width(active.width())
              .height(active.height())
              .focus();
            if (select) {
              editor.select();
            }
          }
        },
        setActiveText = function () {
          var text = editor.val(),
            evt = $.Event('change'),
            originalContent;
          if (active.text() === text || editor.hasClass('error')) {
            return true;
          }
          originalContent = active.html();
          active.text(text).trigger(evt, text);
          if (evt.result === false) {
            active.html(originalContent);
          }
        },
        movement = function (element, keycode) {
          if (keycode === ARROW_RIGHT) {
            return element.next('td');
          } else if (keycode === ARROW_LEFT) {
            return element.prev('td');
          } else if (keycode === ARROW_UP) {
            return element.parent().prev().children().eq(element.index());
          } else if (keycode === ARROW_DOWN) {
            return element.parent().next().children().eq(element.index());
          }
          return [];
        };
      editor.blur(function () {
        setActiveText();
        editor.hide();
      }).keydown(function (e) {
        if (e.which === ENTER) {
          setActiveText();
          editor.hide();
          active.focus();
          e.preventDefault();
          e.stopPropagation();
        } else if (e.which === ESC) {
          editor.val(active.text());
          e.preventDefault();
          e.stopPropagation();
          editor.hide();
          active.focus();
        } else if (e.which === TAB) {
          active.focus();
        } else if (this.selectionEnd - this.selectionStart === this.value.length) {
          var possibleMove = movement(active, e.which);
          if (possibleMove.length > 0) {
            possibleMove.focus();
            e.preventDefault();
            e.stopPropagation();
          }
        }
      })
      .on('input paste', function () {
        var evt = $.Event('validate');
        active.trigger(evt, editor.val());
        if (evt.result === false) {
          editor.addClass('error');
        } else {
          editor.removeClass('error');
        }
      });
      element.on('click keypress dblclick', showEditor)
      .css('cursor', 'pointer')
      .keydown(function (e) {
        var prevent = true,
          possibleMove = movement($(e.target), e.which);
        if (possibleMove.length > 0) {
          possibleMove.focus();
        } else if (e.which === ENTER) {
          showEditor(false);
        } else if (e.which === 17 || e.which === 91 || e.which === 93) {
          showEditor(true);
          prevent = false;
        } else {
          prevent = false;
        }
        if (prevent) {
          e.stopPropagation();
          e.preventDefault();
        }
      });
  
      element.find('td').prop('tabindex', 1);
  
      $(window).on('resize', function () {
        if (editor.is(':visible')) {
          editor.offset(active.offset())
          .width(active.width())
          .height(active.height());
        }
      });
    });
  
  };
  $.fn.editableTableWidget.defaultOptions = {
    cloneProperties: ['padding', 'padding-top', 'padding-bottom', 'padding-left', 'padding-right',
              'text-align', 'font', 'font-size', 'font-family', 'font-weight',
              'border', 'border-top', 'border-bottom', 'border-left', 'border-right'],
    editor: $('<input>')
  };
  
  function setupTables() {
    $('#editabletable').editableTableWidget();

    $('#add-table-row').css({
      float: 'right',
      'margin-bottom': '2em'
    }).on('click', function(e) {
      e.preventDefault();
      $('#editabletable tr:last').before('<tr><td></td><td class="value"></td></tr>');
      $('#editabletable').editableTableWidget();
    });

    $('#editabletable').on('change', 'td', function(evt, newValue) {
      var totalValue = $('td.value').toArray().reduce(function(prev, cur) {
        return prev + (parseInt($(cur).text() || 0));
      }, 0);
      $('#total-value').text(totalValue || 0);

      $('#budget_investment_q7').val($('#editabletable')[0].outerHTML);
    });
  }

  $(document).ready(function() {
    setupTables();
  });

  $(document).on('turbolinks:load', function() {
    setupTables();
  });

  
  </script>
<% end %>